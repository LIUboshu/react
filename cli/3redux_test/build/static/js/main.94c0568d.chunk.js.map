{"version":3,"sources":["redux/constant.js","redux/actions/count.js","container/Count/index.jsx","container/Person/index.jsx","redux/actions/person.js","App.jsx","redux/reducers/person.js","redux/reducers/index.js","redux/reducers/count.js","redux/store.js","index.js"],"names":["INCREMENT","DECREMENT","ADD_PERSON","createIncrementAction","data","type","Count","state","carName","plus","value","sele","props","jia","Number","reduce","jian","evenNum","count","asyncPlus","asyncJia","console","log","this","persons","length","ref","c","onClick","Component","connect","personList","time","dispatch","setTimeout","Person","addPerson","name","nameNode","age","nameAge","personObj","id","nanoid","jiaren","placeholder","map","item","App","initState","personReducer","preState","action","combineReducers","perReducer","createStore","redirect","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.94c0568d.chunk.js","sourcesContent":["/* \r\n    该模块是用于定义action对象中的type类型的常量值\r\n*/\r\nexport const INCREMENT = \"increment\";\r\nexport const DECREMENT = \"decrement\";\r\n\r\nexport const ADD_PERSON = \"add_person\";","/* \r\n    该文件专门为Count组件生成action对象\r\n*/\r\nimport { INCREMENT,DECREMENT } from \"../constant\";\r\nexport const createIncrementAction = data =>({type:INCREMENT,data})\r\nexport const createDecrementAction = data =>({type:DECREMENT,data})\r\n\r\n// 因为store调用return里面的函数,所以这里的store可以省略\r\nexport const createIncrementAsyncAction = (data,time) =>{\r\n    return (dispatch)=>{\r\n        setTimeout(()=>{\r\n            dispatch(createIncrementAction(data))\r\n        },time)\r\n    }\r\n}","/* \r\n    容器组件\r\n        借助react-redux,需要安装cnpm install --save react-redux\r\n    \r\n*/\r\n\r\nimport React, { Component } from 'react'\r\n\r\n// 引入connect用于连接ui组件与redux\r\nimport {connect} from 'react-redux';\r\n// 引入action\r\nimport { \r\n    createIncrementAction,\r\n    createDecrementAction,\r\n    createIncrementAsyncAction \r\n} from \"../../redux/actions/count\";\r\n\r\nclass Count extends Component {\r\n    state = {carName:'haha'};\r\n\r\n   \r\n    plus = ()=>{\r\n        const { value } = this.sele;\r\n        this.props.jia(Number(value));\r\n    }\r\n    reduce = ()=>{\r\n        const { value } = this.sele;\r\n        this.props.jian(Number(value));\r\n    }\r\n    evenNum = ()=>{\r\n        const { value } = this.sele;\r\n        if(this.props.count % 2 !== 0){\r\n            this.props.jia(Number(value));\r\n        }\r\n    }\r\n    // 异步加\r\n    asyncPlus = ()=>{\r\n        const { value } = this.sele;\r\n        this.props.asyncJia(Number(value),1000);\r\n    }\r\n    render() {\r\n        console.log('UI组件接收到的props是:',this.props);\r\n        return (\r\n            <div>\r\n                <h2>这是Count组件,下方组件人数:{this.props.persons.length}</h2>\r\n                <h4>显示的总和是:{this.props.count}</h4>\r\n                <select ref={c => this.sele = c}>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                </select>&nbsp;\r\n                <button onClick={this.plus}>+</button>&nbsp;\r\n                <button onClick={this.reduce}>-</button>&nbsp;\r\n                <button onClick={this.evenNum}>奇数可以相加</button>&nbsp;\r\n                <button onClick={this.asyncPlus}>异步相加</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// 使用connect()()常见并暴露一个Count的容器组件\r\nexport default connect(\r\n    state => ({\r\n        count:state.count,\r\n        persons:state.personList\r\n    }),\r\n    // mapDispathToProps的简写,也可以以是一个对象\r\n    // 通过react-redux调用dispatch\r\n    {\r\n        jia:createIncrementAction,\r\n        jian:createDecrementAction,\r\n        asyncJia:createIncrementAsyncAction\r\n    }\r\n)(Count)\r\n","import React, { Component } from 'react'\r\nimport { nanoid } from \"nanoid\";\r\nimport { connect } from 'react-redux';\r\nimport { createPersonAction } from \"../../redux/actions/person\";\r\nclass Person extends Component {\r\n    addPerson = () =>{\r\n        const name = this.nameNode.value;\r\n        const age = this.nameAge.value;\r\n        const personObj = {id:nanoid(),name,age}\r\n        this.props.jiaren(personObj);\r\n        this.nameNode.value = '';\r\n        this.nameAge.value = '';\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>这是Person组件,上面的组件总和是:{this.props.count}</h2>\r\n                <input ref={c => this.nameNode = c}type=\"text\" placeholder='请输入名字'/>\r\n                <input ref={c => this.nameAge = c}type=\"number\" placeholder='请输入年龄'/>\r\n                <button onClick={this.addPerson}>添加</button>\r\n                <ul>\r\n                    {\r\n                        this.props.persons.map((item)=>{\r\n                            return <li key={item.id}>{item.name}--{item.age}</li>\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        persons:state.personList,\r\n        count:state.count\r\n    }),\r\n    {jiaren:createPersonAction}\r\n)(Person)\r\n","import { ADD_PERSON } from \"../constant\";\r\n\r\nexport const createPersonAction = (personObj) =>({type:ADD_PERSON,data:personObj})","import React, { Component } from 'react'\r\n// 引入Count容器组件\r\nimport Count from \"./container/Count\";\r\n// 引入Person容器组件\r\nimport Person from \"./container/Person\";\r\n\r\nexport default class App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Count/>\r\n                <hr/>\r\n                <Person/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/* \r\n    安装redux\r\n        npm install redux\r\n    \r\n        一.去除Count组件自身的状态\r\n        二.src下简历\r\n            -redux文件夹\r\n                -stors.js\r\n                    -count_reducer.js\r\n        三.store.js\r\n            1>引入redux中的createStore函数,创建一个store\r\n            2>createStore调用时要传入一个人为其服务的reducer\r\n            3>暴露store对象\r\n        四.count_reducer.js\r\n            1>reducer的本质是一个函数,接收,preState.action,返回加工后的状态\r\n            2>reducer有两个作用:初始化状态,加工状态\r\n            3.reducer被第一次调用时,是store自动触发的,传递的preState是undefined\r\n                传递的preState是undefined\r\n                传递的action是:{type:'@@REDUX/INIT_a.2.b.4'}\r\n        五.在index.js中监测store中状态的改变,一旦发生改变重新渲染<App/>\r\n            备注:redux只负责管理状态,至于状态的改变驱动着页面的展示,要考我们自己写\r\n        六.新增文件\r\n            1.count_action.js 专门用于创建action对象\r\n            2.constant.js 放置容易写错的type值\r\n\r\n\r\n        安装中间件\r\n            cnpm install --save redux-thunk\r\n        七.redux异步action   (不是必须要写异步action)\r\n            1.明确:延迟的动作不想交给组件自身,想交给action\r\n            2.何时需要异步action:想要对状态进行操作,但是具体的数据靠异步任务返回\r\n            3.具体编码\r\n                1>安装中间件:cnpm install --save redux-thunk  并设置在store中.redux中引入applyMiddleware    代码:export default createStore(countReducer,applyMiddleware(thunk))\r\n                2>创建action的函数不再返回一般对象,而是返回一个函数,该函数中写异步任务\r\n                3>异步任务有结果后,分发一个同步的action去真正操作数据\r\n            4.备注:异步action不是必须要写的,完全可以自己等待异步任务的结果了再去分发同步action\r\n        八.react-redux基本使用\r\n            1.明确两个概念\r\n                1>UI组件:不能使用任何redux的api,只负责页面呈现/交互等\r\n                2>容器组件:负责和redux通信,将结果交给UI组件\r\n            2.如何创建一个容器组件-----靠react-redux的connect函数\r\n                connect(mapStateToProps,mapDispatchToProps)(UI组件)\r\n                    -mapStateToProps:映射状态,返回值是一个对象\r\n                    -mapDispatchToProps:映射操作状态的方法,返回值是一个对象\r\n            3.备注:容器组件中的store是靠props传进去的,而不是在容器组件中直接引入\r\n            4.备注:mapDispathToProps,也可以以是一个对象\r\n        九.react-redux优化\r\n            这次优化哪些方面?\r\n                优化connect(mapStateToProps,mapDispatchToProps)写法\r\n                优化index.js文件引入Provider传入store,之后不需要在App.jsx文件里面的每一个容器组件引入store\r\n                优化整合ui和容器组件为一个文件\r\n            1.容器组件和UI组件整合一个文件\r\n            2.无需自己给容器组件传递store,给<App/>父级包裹一个<Provider store={store}>即可\r\n            3.mapDispatchToProps也可以简单的写成一个对象\r\n            5.一个组件要和redux'打交道'要经过那几步?\r\n                1>定义一个UI组件----不暴露\r\n                2>引入connect生成一个容器组件,并暴露,写法如下:\r\n                    connect(\r\n                        state => ({key:value}),//映射状态\r\n                        {key:xxxxxAction}//映射操作状态的方法\r\n                    )(UI组件)\r\n                3>在UI组件中通过this.props.xxxx读取和操作状态\r\n        十.react-redux数据共享\r\n            1.定义一个Person组件,需要和Count组件通过redux共享数据\r\n            2.为Person组件编写:reducer/action配置constant常量\r\n            3.重点:Person的reducer和Count的reducer要使用combineReducers进行合并,合并后的总状态是一个对象\r\n            4.交给store的是总reducer,最后注意在组件中取出状态的时候,记得\"取到位\"\r\n        十一.纯函数\r\n             1.一类特别的函数,只要是同样的输入(实参),必定得到同样的输出(返回)\r\n             2.必须遵守以下约束\r\n                    1>不得改写参数数据\r\n                    2>不会产生任何副作用,例如:网络请求,输入和输出设备\r\n                    3>不能调用Date.now()或者Math.random()等不纯的方法\r\n             3.redux的reducer函数必须是一个纯函数\r\n        十二.react-redux开发者工具的使用 Redux DevTools\r\n            1.安装:npm install --save redux-devtools-extension\r\n            2.store中进行配置\r\n                import {composeWithDevTools} from 'redux-devtools-extension'\r\n                const store = cresteStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))\r\n        十三.reducers文件夹中,编写index.js专门用于汇总并暴露所有的reducer\r\n*/ ","\r\n\r\nimport { ADD_PERSON } from \"../constant\";\r\n// 初始化人的列表\r\nconst initState = [{id:\"001\",name:'tom',age:18}]\r\nconst personReducer = (preState = initState,action) =>{\r\n    const {type,data} = action;\r\n    switch (type) {\r\n        case ADD_PERSON:\r\n            // preState.unshift(data)//此处不可以这样写,这样会导致preState被改写了,personReducer就不是纯函数了\r\n            return [data,...preState];\r\n        default:\r\n            return preState;\r\n    }\r\n}\r\nexport default personReducer;\r\n\r\n/* export default function personReducer (preState = initState,action){\r\n    const {type,data} = action;\r\n    switch (type) {\r\n        case ADD_PERSON:\r\n            return [data,...preState];\r\n    \r\n        default:\r\n            return preState;\r\n    }\r\n} */","/* \r\n    该文件用于汇总所有的reducer为一个总的reducer\r\n*/\r\n\r\nimport {combineReducers} from \"redux\";\r\n\r\n// 引入为Count组件服务的reducer\r\nimport count from \"./count\";\r\n// 引入Person组件服务的reducer\r\nimport perReducer from \"./person\";\r\n\r\n// 多个reducer需要借助api组合在一起\r\n// 汇总所有的reducer变为一个总的reducer\r\nexport default  combineReducers({\r\n    personList:perReducer,\r\n    count\r\n    // count:count\r\n})","/* \r\n    初始化和加工状态\r\n    1.该文件适用于创建一个为Count组件服务的reducer,reducer的本质就是一个函数\r\n    2.reducer函数会接到两个参数,分别为:之前的状态(preState),动作对象(action)\r\n*/\r\nimport { INCREMENT,DECREMENT } from \"../constant\";\r\nconst initState = 0;\r\nexport default function countReducer(preState =  initState,action){\r\n    console.log(preState,action);// undefined,{type: \"@@redux/INIT2.k.j.r.e.s\"}\r\n\r\n    /* if(preState === undefined){\r\n        // preState等于undefined的时候是初始化,需要提供初始值\r\n        preState = 0\r\n    } */\r\n\r\n    // 从action对象中获取:type,data\r\n    const {type,data} = action;\r\n    // 这里写switch判断\r\n    // 根据type决定如何加工数据\r\n    \r\n    /* switch (type) {\r\n        case 'increment':\r\n            return preState + data    \r\n        case 'decrement':\r\n            return preState - data   \r\n        default:\r\n            return preState;\r\n    } */\r\n\r\n    switch (type) {\r\n        case INCREMENT:\r\n            return preState + data    \r\n        case DECREMENT:\r\n            return preState - data   \r\n        default:\r\n            return preState;\r\n    }\r\n}","/* \r\n    该文件专门用于暴露一个store对象,整个应用只有一个store对象\r\n*/\r\n\r\n// 引入createStore,专门用于创建redux中最为核心的store对象\r\nimport {createStore,applyMiddleware} from \"redux\";\r\n// 引入汇总之后的reducer\r\nimport redirect from \"./reducers\";\r\n// 引入redux-devtools-extension\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n// 引入redux-thunk,用于支持异步action\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\n\r\n// 暴露store\r\nexport default createStore(redirect,composeWithDevTools(applyMiddleware(thunk)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";//提供\n\nReactDOM.render(\n  /* \n    此处需要用Provider包裹App,目的是让App所有的后代容器组件都能接收到store\n  */\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}